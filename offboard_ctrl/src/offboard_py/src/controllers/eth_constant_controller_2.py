"""
Script for running the ETH constant position tracking controller.
"""
#! /usr/bin/env python

import numpy as np
import scipy


class ConstantPositionTracker:
    def __init__(self, L, Q, R, xyz_goal, dt) -> None:
        self.L = L      # length from the base of the pendulum to the center of mass
        self.Q = Q      # State cost matrix
        self.R = R      # Input cost matrix
        self.dt = dt    # Time step
        self.g = 9.81   # Gravity
        self.nx = 13    # Number of states
        self.nu = 4     # Number of inputs

        # self.Ad = np.array([
        #     [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        #     [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        #     [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        #     [-0.0026340055582782956, 0.0, 0.0, 1.0026340055582783, 0.0, 0.011120862408302021, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        #     [0.0, -0.0026340055582782956, 0.0, 0.0, 1.0026340055582783, 0.0, 0.011120862408302021, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        #     [-0.47432895750192544, 0.0, 0.0, 0.47432895750192544, 0.0, 1.0026340055582783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        #     [0.0, -0.47432895750192544, 0.0, 0.0, 0.47432895750192544, 0.0, 1.0026340055582783, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        #     [0.0, 0.0006055555555555556, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.01111111111111111, 0.0, 0.0],
        #     [-0.0006055555555555556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.01111111111111111, 0.0],
        #     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.01111111111111111],
        #     [0.0, 0.10900000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
        #     [-0.10900000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
        #     [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
        # ])

        self.Ad = np.array([
            [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [-0.0013167139499560476, 0.0, 0.0, 1.0013167139499561, 0.0, 0.011115986759706566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, -0.0013167139499560476, 0.0, 0.0, 1.0013167139499561, 0.0, 0.011115986759706566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [-0.2370605002450466, 0.0, 0.0, 0.2370605002450466, 0.0, 1.0013167139499561, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, -0.2370605002450466, 0.0, 0.0, 0.2370605002450466, 0.0, 1.0013167139499561, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0006055555555555556, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.01111111111111111, 0.0, 0.0],
            [-0.0006055555555555556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.01111111111111111, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.01111111111111111],
            [0.0, 0.10900000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0],
            [-0.10900000000000001, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
        ])

        # self.Bd = np.array([
        #     [0.0, 0.01111111111111111, 0.0, 0.0],
        #     [0.0, 0.0, 0.01111111111111111, 0.0],
        #     [0.0, 0.0, 0.0, 0.01111111111111111],
        #     [0.0, -9.751297190910719e-6, 0.0, 0.0],
        #     [0.0, 0.0, -9.751297190910719e-6, 0.0],
        #     [0.0, -0.0026340055582782956, 0.0, 0.0],
        #     [0.0, 0.0, -0.0026340055582782956, 0.0],
        #     [0.0, 0.0, 2.2427983539094654e-6, 0.0],
        #     [0.0, -2.2427983539094654e-6, 0.0, 0.0],
        #     [6.17283950617284e-5, 0.0, 0.0, 0.0],
        #     [0.0, 0.0, 0.0006055555555555556, 0.0],
        #     [0.0, -0.0006055555555555556, 0.0, 0.0],
        #     [0.01111111111111111, 0.0, 0.0, 0.0]
        # ])

        self.Bd = np.array([
            [0.0, 0.01111111111111111, 0.0, 0.0],
            [0.0, 0.0, 0.01111111111111111, 0.0],
            [0.0, 0.0, 0.0, 0.01111111111111111],
            [0.0, -4.8756485954553596e-6, 0.0, 0.0],
            [0.0, 0.0, -4.8756485954553596e-6, 0.0],
            [0.0, -0.0013167139499560476, 0.0, 0.0],
            [0.0, 0.0, -0.0013167139499560476, 0.0],
            [0.0, 0.0, 2.2427983539094654e-6, 0.0],
            [0.0, -2.2427983539094654e-6, 0.0, 0.0],
            [6.17283950617284e-5, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0006055555555555556, 0.0],
            [0.0, -0.0006055555555555556, 0.0, 0.0],
            [0.01111111111111111, 0.0, 0.0, 0.0]
        ])
        
        self.xgoal = (np.array([0, 0, 0, 0, 0, 0, 0, xyz_goal[0], xyz_goal[1], xyz_goal[2], 0, 0, 0])).reshape((self.nx, 1))

        self.ugoal = (np.array([self.g, 0, 0, 0])).reshape((self.nu, 1))
    
    def infinite_horizon_LQR(self, num_itr=10000):
        P = np.copy(self.Q)
        K_old = np.linalg.inv(self.R + self.Bd.T @ P @ self.Bd) @ self.Bd.T @ P @ self.Ad
        P_old = self.Q + self.Ad.T @ P @ (self.Ad - self.Bd @ K_old)

        for i in range(num_itr):
            K_new = np.linalg.inv(self.R + self.Bd.T @ P_old @ self.Bd) @ self.Bd.T @ P_old @ self.Ad
            P_new = self.Q + self.Ad.T @ P_old @ (self.Ad - self.Bd @ K_new)
            if np.linalg.norm(K_new - K_old) < 1e-9:
                print("Infinite horizon LQR converged at iteration ", i)
                print("LQR Gain: \n", K_new)
                print("Kx_wx: ", K_new[1, 0], " Kr_wx: ", K_new[1, -4])
                print("Ky_wy: ", K_new[0, 1], " Ks_wy: ", K_new[0, -3])
                print("Krd_wx: ", K_new[1, -2], " Ksd_wy: ", K_new[0, -1])
                return K_new
            else:
                K_old = K_new
                P_old = P_new

        print("LQR did not converge")


if __name__ == "__main__":
    
    ## Check that the LQR is working
    Q = 1.0 * np.diag([1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0])
    R = 1.0 * np.diag([1, 1, 1, 1])

    pos_tracker = ConstantPositionTracker(1.0, Q, R, 0.02)
    K = pos_tracker.infinite_horizon_LQR()